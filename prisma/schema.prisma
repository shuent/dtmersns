generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  nickname  String   @unique @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  followedBy Follow[] @relation("following")
  following  Follow[] @relation("follower")

  profile  Profile?
  posts    Post[]
  password Password?
  comments  Comment[]
}

model Profile {
  userId        String  @id
  bio          String?
  twitterUrl    String?
  instagramUrl  String?
  soundcloudUrl String?
  spotifyUrl    String?
  webUrl        String?
  user          User    @relation(fields: [userId], references: [id])
}

model Follow {
  followerId  String
  followingId String
  follower    User     @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())

  @@id([followerId, followingId])
}

model Password {
  hash   String
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
  id       String  @id @default(cuid())
  kind     String /// song, hire, skill
  body     String
  audioUrl String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments  Comment[]
}

model Comment {
  id        String   @id @default(cuid())
  body      String
  createdAt DateTime @default(now())
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
}
